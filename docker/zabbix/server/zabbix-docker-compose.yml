networks:
  zabbix-network:
    external: true
  traefik-network:
    external: true

volumes:
  zabbix-postgres:
  zabbix-postgres-backup:
  zabbix-database-backups:
  traefik-certificates:

services:
  postgres:
    image: ${ZABBIX_POSTGRES_IMAGE_TAG}
    volumes:
      - zabbix-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${ZABBIX_DB_NAME}
      POSTGRES_USER: ${ZABBIX_DB_USER}
      POSTGRES_PASSWORD: ${ZABBIX_DB_PASSWORD}
    networks:
      - zabbix-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${ZABBIX_DB_NAME}", "-U", "${ZABBIX_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  zabbix-server:
    image: ${ZABBIX_SERVER_IMAGE_TAG}
    environment:
      DB_SERVER_HOST: postgres
      DB_SERVER_PORT: 5432
      POSTGRES_DB: ${ZABBIX_DB_NAME}
      POSTGRES_USER: ${ZABBIX_DB_USER}
      POSTGRES_PASSWORD: ${ZABBIX_DB_PASSWORD}
      ZBX_CACHESIZE: ${ZABBIX_CACHESIZE}
    networks:
      - zabbix-network
      - traefik-network
    healthcheck:
      test: grep -qr "zabbix_server" /proc/*/status || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Define TCP router rules for Zabbix to match all incoming requests (HostSNI)
      - "traefik.tcp.routers.zabbix-server-tcp.rule=HostSNI(`*`)"
      # Assign the Zabbix TCP router to a named Traefik service
      - "traefik.tcp.routers.zabbix-server-tcp.service=zabbix-server-tcp"
      # Use the 'zabbix-tcp' (custom) entry point
      - "traefik.tcp.routers.zabbix-server-tcp.entrypoints=zabbix-tcp"
      # Define the internal container port for routing to the Zabbix TCP service
      - "traefik.tcp.services.zabbix-server-tcp.loadbalancer.server.port=10051"
      # Assign the Zabbix UDP router to a named Traefik service
      - "traefik.udp.routers.zabbix-server-udp.service=zabbix-server-udp"
      # Use the 'zabbix-udp' (custom) entry point
      - "traefik.udp.routers.zabbix-server-udp.entrypoints=zabbix-udp"
      # Define the internal container port for routing to the Zabbix UDP service
      - "traefik.udp.services.zabbix-server-udp.loadbalancer.server.port=10051"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  zabbix-dashboard:
    image: ${ZABBIX_WEB_IMAGE_TAG}
    environment:
      DB_SERVER_HOST: postgres
      DB_SERVER_PORT: 5432
      POSTGRES_DB: ${ZABBIX_DB_NAME}
      POSTGRES_USER: ${ZABBIX_DB_USER}
      POSTGRES_PASSWORD: ${ZABBIX_DB_PASSWORD}
      ZBX_SERVER_HOST: zabbix-server
      PHP_TZ: ${ZABBIX_TIMEZONE}
    networks:
      - zabbix-network
      - traefik-network
    volumes:
      - /data/web/entra.cer:/etc/zabbix/web/certs/entra.cer:ro
      - /data/web/zabbix.conf.php:/etc/zabbix/web/zabbix.conf.php:ro
      - /data/web/entra.cer:/usr/share/zabbix/conf/certs/entra.cer:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on a specific hostname
      - "traefik.http.routers.zabbix-dashboard.rule=Host(`${ZABBIX_DASHBOARD_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.zabbix-dashboard.service=zabbix-dashboard"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.zabbix-dashboard.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.zabbix-dashboard.loadbalancer.server.port=8080"
      # Enable TLS on this router
      - "traefik.http.routers.zabbix-dashboard.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.zabbix-dashboard.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.zabbix-dashboard.loadbalancer.passhostheader=true"
      # Apply a compression middleware
      - "traefik.http.routers.zabbix-dashboard.middlewares=compresstraefik"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      zabbix-server:
        condition: service_healthy
      traefik:
        condition: service_healthy

  zabbix-agent:
    image: ${ZABBIX_AGENT_IMAGE_TAG}
    environment:
      ZBX_HOSTNAME: Zabbix server
      ZBX_SERVER_HOST: zabbix-server
    networks:
      - zabbix-network
    restart: unless-stopped
    depends_on:
      - postgres
      - zabbix-server

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      # Set the log level (DEBUG, INFO, WARN, ERROR)
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # Enable the built-in API and web-based dashboard
      - "--api.dashboard=true"
      # Enable the /ping endpoint so we can health-check Traefik
      - "--ping=true"
      # Assign the /ping endpoint to a dedicated entry point on port 8082
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8082"
      # Define the primary HTTP entry point on port 80
      - "--entrypoints.web.address=:80"
      # Define the secure (HTTPS) entry point on port 443
      - "--entrypoints.websecure.address=:443"
      # Define the Zabbix TCP entry point on port 10051
      - "--entryPoints.zabbix-tcp.address=:10051"
      # Define the Zabbix UDP entry point on port 10051
      - "--entryPoints.zabbix-udp.address=:10051/udp"
      # Enable the Docker provider to detect containers and their labels
      - "--providers.docker=true"
      # Point Traefik to the Docker socket
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Prevent automatic exposure of all containers; only expose containers
      # with "traefik.enable=true"
      - "--providers.docker.exposedbydefault=false"
      # Use ACME (Let's Encrypt) to generate/renew certificates via TLS challenge
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # The email address used by Let's Encrypt for renewal notices
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      # The file where ACME certificates are stored inside the container
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Enable Prometheus metrics
      - "--metrics.prometheus=true"
      # Configure Prometheus histogram buckets
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # Check for newer Traefik versions and optionally log that info
      - "--global.checknewversion=true"
      # Disable sending anonymous usage data to the Traefik maintainers
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
      - "10050:10050"
      - "10051:10051"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # A router to expose the Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Basic Authentication for the Traefik dashboard
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Specify the internal server port to the dashboard service
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      # Pass the original Host header to the backend
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      # HTTP -> HTTPS redirect for all hosts
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: ${ZABBIX_POSTGRES_IMAGE_TAG}
    command: >-
      sh -c 'sleep $ZABBIX_BACKUP_INIT_SLEEP &&
      while true; do
        pg_dump -h postgres -p 5432 -d $ZABBIX_DB_NAME -U $ZABBIX_DB_USER | gzip > $ZABBIX_POSTGRES_BACKUPS_PATH/$ZABBIX_POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
        find $ZABBIX_POSTGRES_BACKUPS_PATH -type f -mtime +$ZABBIX_POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
        sleep $ZABBIX_BACKUP_INTERVAL; done'
    volumes:
      - zabbix-postgres-backup:/var/lib/postgresql/data
      - zabbix-database-backups:${ZABBIX_POSTGRES_BACKUPS_PATH}
    environment:
      ZABBIX_DB_NAME: ${ZABBIX_DB_NAME}
      ZABBIX_DB_USER: ${ZABBIX_DB_USER}
      PGPASSWORD: ${ZABBIX_DB_PASSWORD}
      ZABBIX_BACKUP_INIT_SLEEP: ${ZABBIX_BACKUP_INIT_SLEEP}
      ZABBIX_BACKUP_INTERVAL: ${ZABBIX_BACKUP_INTERVAL}
      ZABBIX_POSTGRES_BACKUP_PRUNE_DAYS: ${ZABBIX_POSTGRES_BACKUP_PRUNE_DAYS}
      ZABBIX_POSTGRES_BACKUPS_PATH: ${ZABBIX_POSTGRES_BACKUPS_PATH}
      ZABBIX_POSTGRES_BACKUP_NAME: ${ZABBIX_POSTGRES_BACKUP_NAME}
    networks:
      - zabbix-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
